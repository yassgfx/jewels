/*------------------------------------*\
  #FUNCTIONS-TOOLS
\*------------------------------------*/

@function color($color, $type) {
    @if map-has-key($colors, $color) {
        $curr_color: map-get($colors, $color);
        @if map-has-key($curr_color, $type) {
            @return map-get($curr_color, $type);
        }
    }
    @warn "Unknown `#{type}` in $colors.";
    @return null;
}

@function is-color-light($color) {
    @if (lightness($color) > 60) {
        @return true;
    }
    @else {
        @return false;
    }
}

@function is-color-dark($color) {
    @if (lightness($color) < 60) {
        @return true;
    }
    @else {
        @return false;
    }
}

@function shade($color, $percent) {
    @return mix(black, $color, $percent);
}

@function tint($color, $percent) {
    @return mix(white, $color, $percent);
}

@function em($pixels, $context: $base-font-size) {
    @return #{$pixels/$context}em;
}

@function map-has-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
    }
    @return true;
}

@function map-has-nested-keys($map, $keys...) {
    @each $key in $keys {
        @if not map-has-key($map, $key) {
            @return false;
        }
        $map: map-get($map, $key);
    }
    @return true;
}

@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

@function top-shadow($depth) {
    $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
    $blur: nth(1.5 3 10 14 19, $depth) * 4px;
    $color: rgba(black, nth(.02 .06 .09 .15 .20, $depth));
    @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
    $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
    $blur: nth(1 3 3 5 6, $depth) * 4px;
    $color: rgba(black, nth(.14 .13 .13 .12 .12, $depth));
    @return 0 $primary-offset $blur $color;
}